pipeline {
    agent any
    
    environment {
        DATE_TIME = sh(script: 'date "+%Y-%m-%d-%H-%M"', returnStdout: true).trim()
        AWS_REGION = 'eu-west-1'
        EKS_CLUSTER_NAME = 'stage-v2-explorer-shido'
        KUBE_CONFIG_FILE = "${WORKSPACE}/kubeconfig.yaml"
        ECR_REPO_URL = '096085577054.dkr.ecr.eu-west-1.amazonaws.com/stage-shido-jenkins'
        
    }
    
    stages {
        stage('Check and Install kubectl') {
            steps {
                script {
                    def kubectlInstalled = sh(script: 'command -v kubectl', returnStatus: true)
                    if (kubectlInstalled != 0) {
                        echo 'kubectl not found. Installing...'
                        sh 'curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl'
                        sh 'chmod +x ./kubectl'
                        sh 'sudo mv ./kubectl /usr/local/bin/kubectl'
                    } else {
                        echo 'kubectl is already installed.'
                    }
                }
            }
        }

        stage('git clone') {
            steps {
                script {
                    git credentialsId: '52.49.77.238', url: 'http://repo.antiersolutions.com/shido_v2/shido-v2-explorer-api-updated.git', branch: 'stage' 
                }
            }
        }
        
        stage('Login to ECR') {
            steps {
                script {
                    // Log in to ECR
                    sh "aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin 096085577054.dkr.ecr.eu-west-1.amazonaws.com"
                }
            }
        }
        
        stage('Docker build') {
            steps {
                script {
                    // Docker build
                    sh "docker build -t explorer-api ." 
                }
            }
        }
        
        stage('Docker tag') {
            steps {
                script {
                     // Docker tag
                     sh "docker tag explorer-api:latest 096085577054.dkr.ecr.eu-west-1.amazonaws.com/stage-shido-jenkins:${env.DATE_TIME}"
                     
                }
            }
        }
        
        stage('Docker push to ECR') {
            steps {
                script {
                    // Docker push to ECR
                    sh "docker push 096085577054.dkr.ecr.eu-west-1.amazonaws.com/stage-shido-jenkins:${env.DATE_TIME}"
                }
            }
        }
        
        stage('Update kubeconfig') {
            steps {
                script {
                    // Authenticate with EKS and update kubeconfig
                    sh "aws eks --region ${AWS_REGION} update-kubeconfig --name ${EKS_CLUSTER_NAME} --kubeconfig ${KUBE_CONFIG_FILE}"
                }
            }
        }
        
        stage('Deploy to EKS') {
            steps {
                script {
                    // Replace placeholder with actual ECR image URL in the Deployment manifest
                    sh "sed -i 's|REPLACE_ME|${ECR_REPO_URL}:${env.DATE_TIME}|' kubernetes-manifests.yaml"
                    // Deploy to EKS using kubectl
                    sh "ls -l"
                    sh "pwd"
                    sh "kubectl apply -f ./kubernetes-manifests.yaml --kubeconfig=/var/lib/jenkins/workspace/stage-shido-pipeline/kubeconfig.yaml"
                }
            }
        }
        
    }
}

